# Grammar preprocessor grammar

# Grammar preprocessor consists of two logic modules:
# Parser that reads grammar files and produces data
# Preprocessor that uses parser to get the data, performs modifications and
# validation of the data

@entry
Grammar <- Expression EOF

# BUG
# Expression  <- ((!(!'\\' '@') .)* Directive (!(!'\\' '@') .)*)*

Expression  <- (TextPiece (Directive TextPiece)?)*
TextPiece   <- (!AT .)*

Directive   <- AT (Include / If)
Include     <- INCLUDE Path Newline
If          <- IF LBRACE Condition RBRACE Newline Expression ElseIf? Else? End
ElseIf      <- AT ELSE Spacing If
Else        <- AT ELSE OptSpacing Newline Expression
End         <- AT END Newline

Path        <- Char+
Char        <- [a-zA-Z0-9/_-]

Condition   <- Disjunction
Disjunction <- Disjunction OR Conjunction / Conjunction
Conjunction <- Conjunction AND Negation / Negation
Negation    <- NOT? Term
Term        <- Operator / LBRACE Disjunction RBRACE

Operator    <- IsOperator

IsOperator  <- VarName Spacing IS EnumValue OptSpacing
VarName     <- Identifier
EnumValue   <- Identifier

Identifier  <- IdStart IdCont
IdStart     <- [a-zA-Z_]
IdCont      <- [a-zA-Z0-9_]*

AT      <- '@' OptSpacing
INCLUDE <- "include" Spacing
IF      <- "if" Spacing
ELSE    <- "else"
END     <- "end" OptSpacing
LBRACE  <- '(' OptSpacing
RBRACE  <- ')' OptSpacing
CLBRACE <- '{'
CRBRACE <- '}'

OR      <- "or" Spacing
AND     <- "and" Spacing
NOT     <- "not" Spacing
IS      <- "is" Spacing

Newline    <- '\r'? '\n'
Spacing    <- WS+
OptSpacing <- WS*
WS         <- ' ' / '\r' / '\n'

EOF <- !.
