@entry
Grammar     <- Spacing Entity+ EndOfFile                          $grammar_action
Entity      <- Definition / MetaDef / Include
Definition  <- directive:RuleDir* Identifier LEFTARROW Expression $def_action
             / MetaDef

Include     <- tok:AT INCLUDE IncludePath Spacing                 $include_action
IncludePath <- ['] path:(!['] .)+ [']                             $path_action
             / ["] path:(!["] .)+ ["]                             $path_action

RuleDir     <- AT DirName Spacing                                 $directive_action
DirName     <- Identifier

Expression  <- Sequence seqs:(_:SLASH Sequence)*                  $expr_action
Sequence    <- parts:Prefix* m:MetaRule?                          $sequence_action
Prefix      <- MetaName? lookahead:(AND / NOT)? Suffix            $prefix_action
Suffix      <- Primary q:(QUESTION / STAR / PLUS / Repetition)?   $suffix_action
Primary     <- Identifier !LEFTARROW
             / OPEN Expression CLOSE
             / Literal / Class / DOT
MetaName    <- Identifier SEMI
MetaRule    <- '$' body:MetaDefBody                               $metarule_def_action
             / '$' Spacing Identifier !'{'                        $metarule_ref_action

MetaDef     <- '$' Spacing Identifier expr:MetaDefBody            $metadef_action
MetaDefBody <- '{' expr:(!'}' (EscCurClose / .))* '}' Spacing     $metadef_body_action
EscCurClose <- str:'\\}'                                          $esc_cur_close_action

Identifier  <- start:IdentStart cont:IdentCont* Spacing           $ident_action
IdentStart  <- [a-zA-Z_]
IdentCont   <- IdentStart / [0-9]

Literal     <- ['] chars:(!['] Char)* ['] Spacing                 $literal_action
             / ["] chars:(!["] Char)* ["] Spacing                 $literal_action
Class       <- '[' ranges:(!']' Range)* ']' Spacing               $class_action
Range       <- beg:Char '-' !']' end:Char                         $range_2_action
             / beg:Char                                           $range_1_action
Char        <- '\\' char:[nrt'"\[\]\\]                            $esc_char_action
             / '\\' char1:[0-2] char2:[0-7] char3:[0-7]           $oct_char_action_1
             / '\\' char1:[0-7] char2:[0-7]?                      $oct_char_action_2
             / '\\u' chars:HexDigit{4}                            $unicode_char_action
             / !'\\' any:.                                        $any_char_action

Repetition  <- '{'
               grp:(Number _:',' Number / Number) '}' Spacing     $rep_action
Number      <- chars:[0-9]+                                       $number_action
HexDigit    <- char:[a-fA-F0-9]

@ignore
INCLUDE     <- "include" Spacing
@ignore
LEFTARROW   <- '<-' Spacing
@ignore
SLASH       <- '/' Spacing
AND         <- '&' Spacing  $and_action
NOT         <- '!' Spacing  $not_action
QUESTION    <- '?' Spacing  $optional_action
STAR        <- '*' Spacing  $zero_or_more_action
PLUS        <- '+' Spacing  $one_or_more_action
@ignore
OPEN        <- '(' Spacing
@ignore
CLOSE       <- ')' Spacing
DOT         <- '.' Spacing  $dot_action
@ignore
AT          <- '@' Spacing
@ignore
SEMI        <- ':' Spacing

@ignore
Spacing     <- (Space / Comment)*
Comment     <- '#' (!EndOfLine .)* EndOfLine
Space       <- ' ' / '\t' / EndOfLine
EndOfLine   <- '\r\n' / '\n' / '\r'
EndOfFile   <- !.

$grammar_action {
  rules, metarules, includes = [], [], []
  for e in entity:
      if isinstance(e, Rule):
          rules.append(e)
      elif isinstance(e, MetaRule):
          metarules.append(e)
      elif isinstance(e, Include):
          includes.append(e)

  return Grammar(rules, metarules, includes)
}

$include_action {
  return Include(includepath, tok.line, self.reader.filename)
}

$path_action {
  return ''.join(path)
}

$def_action {
  ignore = "ignore" in directive
  entry = "entry" in directive
  return Rule(identifier, expression, ignore=ignore, entry=entry)
}

$directive_action {
  return dirname.value
}

$expr_action {
  return Expr((sequence, *seqs))
}

$sequence_action {
  m = m or None
  return Alt(parts, metarule=m)
}

$prefix_action {
  if lookahead:
      lookahead.item = suffix
      obj = lookahead
  else:
      obj = suffix
  metaname = metaname or None
  return NamedItem(metaname, obj)
}

$suffix_action {
  if q:
      q.item = primary
      return q
  return primary
}

$metarule_def_action {
  expr, info = body
  return MetaRule(None, expr, info)
}

$metarule_ref_action {
  return MetaRef(identifier)
}

$metadef_action {
  expr, info = expr
  return MetaRule(identifier, expr, info)
}

$metadef_body_action {
  return ''.join(expr), ParseInfo(expr) if expr else None
}

$esc_cur_close_action {
  return Token('\}', str.line, str.start, str.end, str.filename)
}

$ident_action {
  return Id(''.join((start, *cont)), ParseInfo([start, *cont]))
}

$literal_action {
  if len(chars) == 1:
      return chars[0]
  return String(chars)
}

$class_action {
  return Class(ranges)
}

$range_2_action {
  return Range(beg, end)
}

$range_1_action {
  return Range(beg)
}

$esc_char_action {
  chr_map = {
    'n': '\n',
    'r': '\r',
    't': '\t',
  \}

  return Char(chr_map.get(char, char), ParseInfo(char))
}

$oct_char_action_1 {
  string = ''.join((char1, char2, char3))
  return Char(int(string, base=8), ParseInfo([char1, char2, char3]))
}

$oct_char_action_2 {
  char2 = char2 if isinstance(char2, str) else ''
  string = ''.join((char1, char2))
  return Char(int(string, base=8),
              ParseInfo(list(filter(None, (char1, char2)))))
}

$unicode_char_action {
  string = ''.join(chars)
  return Char(int(string, base=16), ParseInfo(chars))
}

$any_char_action {
  return Char(ord(any), ParseInfo(any))
}

$number_action {
  string = ''.join(chars)
  return int(string), ParseInfo(chars)
}

$and_action {
  return And(None)
}

$not_action {
  return Not(None)
}

$optional_action {
  return ZeroOrOne(None)
}

$zero_or_more_action {
  return ZeroOrMore(None)
}

$one_or_more_action {
  return OneOrMore(None)
}

$rep_action {
  beg, end = grp if isinstance(grp, list) else (grp, (None, None))
  infos = list(filter(None, (beg[1], end[1])))
  return Repetition(None, beg[0], end[0], ParseInfo(infos))
}

$dot_action {
  return AnyChar()
}
