@entry
Grammar    <- Spacing Entity+ EndOfFile                          $grammar_action
Entity     <- Definition / MetaDef
Definition <- Directive* Identifier LEFTARROW Expression         $def_action
            / MetaDef

Directive  <- AT DirName Spacing
DirName    <- Identifier

Expression <- Sequence seqs:(SLASH Sequence)*                    $expr_action
Sequence   <- p:Prefix* m:MetaRule?                              $sequence_action
Prefix     <- MetaName? lookahead:(AND / NOT)? s:Suffix          $prefix_action
Suffix     <- p:Primary q:(QUESTION / STAR / PLUS / Repetition)? $suffix_action
Primary    <- Identifier !LEFTARROW
            / OPEN Expression CLOSE
            / Literal / Class / DOT
MetaName   <- Identifier SEMI                                    $metaname_action
MetaRule   <- '${' content:(![}] .)* '}' Spacing
            / '$' Spacing Identifier !'{'

MetaDef    <- '$' Spacing Identifier '{' expr:(![}] .)* '}' Spacing   $metadef_action

Identifier <- IdentStart IdentCont* Spacing
IdentStart <- [a-zA-Z_]
IdentCont  <- IdentStart / [0-9]

Literal    <- ['] seq:(!['] Char)* ['] Spacing
            / ["] seq:(!["] Char)* ["] Spacing
Class      <- '[' ranges:(!']' Range)* ']' Spacing
Range      <- Char '-' Char
            / Char
Char       <- '\\' char:[nrt'"\[\]\\]
            / '\\' char1:[0-2] char2:[0-7] char3:[0-7]
            / '\\' char1:[0-7] char2:[0-7]?
            / '\\u' HexDigit{4}
            / !'\\' .

Repetition <- '{'
              grp:(Number ',' Number / Number) '}' Spacing
Number     <- chars:[0-9]+
HexDigit   <- char:[0-9A-F]

LEFTARROW  <- '<-' Spacing
SLASH      <- '/' Spacing
AND        <- '&' Spacing ${ And() }
NOT        <- '!' Spacing
QUESTION   <- '?' Spacing
STAR       <- '*' Spacing
PLUS       <- '+' Spacing
OPEN       <- '(' Spacing
CLOSE      <- ')' Spacing
DOT        <- '.' Spacing
AT         <- '@' Spacing
SEMI       <- ':' Spacing

@ignore
Spacing    <- (Space / Comment)*
Comment    <- '#' (!EndOfLine .)* EndOfLine
Space      <- ' ' / '\t' / EndOfLine
EndOfLine  <- '\r\n' / '\n' / '\r'
EndOfFile  <- !.

$sequence_action {
  return Alt(Part(pred=p[0], prime=p[1], quant=p[2]),
             metarule=(m if isinstance(m, str) else None))
}

$expr_action {
  return Expression(sequence, *seqs)
}

$def_action {
  return Rule(identifier, expression, directives=directive)
}

$grammar_action {
  return Grammar(*definition)
}

$prefix_action {
  return (grp, *s) if isinstance(grp, Node) else (None, *s)
}

$suffix_action {
  return (p, q) if isinstance(q, Node) else (p, None)
}

$metaname_action {
  return identifier.string
}

$metadef_action {
  return MetaDef(id=identifier, expr=expr)
}
