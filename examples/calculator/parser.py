# This is automatically generated code, do not edit.
# Generated by Polygen 0.0.1
# 2024-05-09 09:30 PM


from __future__ import annotations

import io

from typing import Optional


class CalculatorError(Exception):
    pass


def memoize(fn):
    def wrapper(self, *args):
        pos = self._mark()
        memo = self._memos.get(pos)
        if memo is None:
            memo = self._memos[pos] = {}
        key = (fn, args)
        if key in memo:
            res, endpos = memo[key]
            self._reset(endpos)
        else:
            res = fn(self, *args)
            endpos = self._mark()
            memo[key] = res, endpos
        return res

    return wrapper


class Reader:
    """
    Reads the file and produces a stream of characters.

    Reader supports strings and UTF-8 encoded streams only.
    """

    def __init__(self, stream: str | io.IOBase, bufsize=4096):
        self.buffer = ""
        self.stream = None
        self.name = None
        self.bufsize = bufsize
        self.eof = False
        self.pointer = 0
        self.line = 1
        self.column = 0

        if isinstance(stream, str):
            self.name = "<unicode string>"
        elif isinstance(stream, io.IOBase):
            self.name = getattr(stream, 'name', '<file>')
            self.stream = stream
            self.eof = False

            if not stream.readable():
                with_name = f": {self.name}" if self.name else ""
                raise ValueError("stream must be readable" + with_name)

    def __iter__(self) -> Reader:
        return self

    def __next__(self) -> str:
        try:
            char = self.buffer[self.pointer]
        except IndexError:
            if self.stream:
                self.update()
            try:
                char = self.buffer[self.pointer]
            except IndexError:
                self.eof = True
                raise StopIteration
        if char in '\r\n':
            self.line += 1
            self.column = 0
        else:
            self.column += 1
        self.pointer += 1
        return char

    def update(self, length: int = 1) -> None:
        assert self.stream
        if self.eof:
            return
        self.buffer = self.buffer[self.pointer:]
        self.pointer = 0
        while len(self.buffer) < length:
            data = self.stream.read(self.bufsize)
            if data:
                self.buffer += data
            else:
                self.eof = True
                break


class Parser:
    def __init__(self, stream, constants: dict[str, int | float]):
        self._memos = {}
        self.reader = Reader(stream)
        self.chars: list[str] = []
        self.constants = constants
        self.pos = 0

    @memoize
    def _expectc(self, char: str | None = None) -> Optional[str]:
        if c := self._peek_char():
            if char is not None and c != char:
                return None
            self.pos += 1
            return c
        return None

    @memoize
    def _expects(self, string: str) -> Optional[str]:
        pos = self._mark()
        for c in string:
            if c != self._peek_char():
                self._reset(pos)
                return None
            self.pos += 1
        return string

    def _lookahead(self, positive, fn, *args):
        pos = self._mark()
        ok = fn(*args) is not None
        self._reset(pos)
        return ok == positive

    def _loop(self, nonempty, fn, *args):
        pos = self._mark()
        nodes = []
        while (node := fn(*args)) is not None:
            nodes.append(node)
        if len(nodes) >= nonempty:
            return nodes
        self._reset(pos)
        return None

    def _maybe(self, fn, *args):
        if (result := fn(*args)) is not None:
            return result
        return True

    def _get_char(self) -> str:
        char = self._peek_char()
        self.pos += 1
        return char

    def _peek_char(self) -> str:
        if self.pos == len(self.chars):
            self.chars.append(next(self.reader, None))
        return self.chars[self.pos]

    def _mark(self) -> int:
        return self.pos

    def _reset(self, pos: int):
        self.pos = pos

    def _action(self, rulename, *args, **kwargs):
        if self.actions is not None:
            fn = getattr(self.actions, rulename, None)
            if fn:
                return fn(**kwargs)
        return args

    def parse(self):
        return self._Grammar()

    @memoize
    def _Grammar(self):
        pos = self._mark()
        if (
            (expr := self._Expr()) is not None
            and (endoffile := self._EndOfFile()) is not None
        ):
            # grammar_action
            return expr
        self._reset(pos)
        return None

    @memoize
    def _Expr(self):
        pos = self._mark()
        if (
            (term := self._Term()) is not None
            and self._PLUS() is not None
            and (expr := self._Expr()) is not None
        ):
            # sum_action
            return term + expr
        self._reset(pos)
        if (
            (term := self._Term()) is not None
            and self._MINUS() is not None
            and (expr := self._Expr()) is not None
        ):
            # sub_action
            return term - expr
        self._reset(pos)
        if ((term := self._Term()) is not None):
            return term
        self._reset(pos)
        return None

    @memoize
    def _Term(self):
        pos = self._mark()
        if (
            (atom := self._Atom()) is not None
            and self._MUL() is not None
            and (term := self._Term()) is not None
        ):
            # mul_action
            return atom * term
        self._reset(pos)
        if (
            (atom := self._Atom()) is not None
            and self._DIV() is not None
            and (term := self._Term()) is not None
        ):
            # div_action
            return atom / term
        self._reset(pos)
        if ((atom := self._Atom()) is not None):
            return atom
        self._reset(pos)
        if (
            self._OPEN() is not None
            and (expr := self._Expr()) is not None
            and self._CLOSE() is not None
        ):
            return expr
        self._reset(pos)
        return None

    @memoize
    def _Atom(self):
        pos = self._mark()
        if ((id := self._Id()) is not None):
            # atom_id_action
            value = self.constants.get(id)
            if value is None:
                raise CalculatorError("undefined variable", id)
            return value
        self._reset(pos)
        if ((number := self._Number()) is not None):
            return number
        self._reset(pos)
        return None

    @memoize
    def _Id(self):
        pos = self._mark()
        if (
            (idstart := self._IdStart()) is not None
            and (idcont := self._loop(False, self._IdCont)) is not None
            and self._Spacing() is not None
        ):
            # id_action
            return ''.join((idstart, *idcont))
        self._reset(pos)
        return None

    @memoize
    def _IdStart(self):
        pos = self._mark()
        if ((_1 := self._IdStart__GEN_1()) is not None):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _IdCont(self):
        pos = self._mark()
        if ((_1 := self._IdCont__GEN_1()) is not None):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _Number(self):
        pos = self._mark()
        if ((float := self._Float()) is not None):
            return float
        self._reset(pos)
        if ((int := self._Int()) is not None):
            return int
        self._reset(pos)
        return None

    @memoize
    def _Int(self):
        pos = self._mark()
        if (
            (chars := self._loop(True, self._Int__GEN_1)) is not None
            and self._Spacing() is not None
        ):
            # int_action
            string = ''.join(chars)
            return int(string)
        self._reset(pos)
        return None

    @memoize
    def _Float(self):
        pos = self._mark()
        if (
            (integer := self._loop(False, self._Int__GEN_1)) is not None
            and (_1 := self._expectc('.')) is not None
            and (frac := self._loop(True, self._Int__GEN_1)) is not None
            and self._Spacing() is not None
        ):
            # float_action
            integer = ''.join(integer)
            frac = ''.join(frac)
            string = '.'.join((*integer, *frac))
            return float(string)
        self._reset(pos)
        return None

    @memoize
    def _PLUS(self):
        pos = self._mark()
        if (
            (_1 := self._expectc('+')) is not None
            and self._Spacing() is not None
        ):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _MINUS(self):
        pos = self._mark()
        if (
            (_1 := self._expectc('-')) is not None
            and self._Spacing() is not None
        ):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _MUL(self):
        pos = self._mark()
        if (
            (_1 := self._expectc('*')) is not None
            and self._Spacing() is not None
        ):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _DIV(self):
        pos = self._mark()
        if (
            (_1 := self._expectc('/')) is not None
            and self._Spacing() is not None
        ):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _EQ(self):
        pos = self._mark()
        if (
            (_1 := self._expectc('=')) is not None
            and self._Spacing() is not None
        ):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _OPEN(self):
        pos = self._mark()
        if (
            (_1 := self._expectc('(')) is not None
            and self._Spacing() is not None
        ):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _CLOSE(self):
        pos = self._mark()
        if (
            (_1 := self._expectc(')')) is not None
            and self._Spacing() is not None
        ):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _Spacing(self):
        pos = self._mark()
        if ((_1 := self._loop(False, self._Spacing__GEN_1)) is not None):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _Space(self):
        pos = self._mark()
        if ((_1 := self._expectc(' ')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('\t')) is not None):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _EndOfLine(self):
        pos = self._mark()
        if ((_1 := self._expectc('\n')) is not None):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _EndOfFile(self):
        pos = self._mark()
        if (self._lookahead(False, self._AnyChar__GEN)):
            return True
        self._reset(pos)
        return None

    @memoize
    def _AnyChar__GEN(self):
        pos = self._mark()
        if ((_1 := self._expectc()) is not None):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _IdStart__GEN_1(self):
        pos = self._mark()
        if ((_1 := self._expectc('A')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('B')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('C')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('D')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('E')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('F')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('G')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('H')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('I')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('J')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('K')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('L')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('M')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('N')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('O')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('P')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('Q')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('R')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('S')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('T')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('U')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('V')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('W')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('X')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('Y')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('Z')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('_')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('a')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('b')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('c')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('d')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('e')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('f')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('g')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('h')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('i')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('j')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('k')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('l')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('m')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('n')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('o')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('p')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('q')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('r')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('s')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('t')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('u')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('v')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('w')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('x')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('y')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('z')) is not None):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _IdCont__GEN_1(self):
        pos = self._mark()
        if ((_1 := self._expectc('0')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('1')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('2')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('3')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('4')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('5')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('6')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('7')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('8')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('9')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('A')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('B')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('C')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('D')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('E')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('F')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('G')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('H')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('I')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('J')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('K')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('L')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('M')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('N')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('O')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('P')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('Q')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('R')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('S')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('T')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('U')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('V')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('W')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('X')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('Y')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('Z')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('_')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('a')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('b')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('c')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('d')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('e')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('f')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('g')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('h')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('i')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('j')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('k')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('l')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('m')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('n')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('o')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('p')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('q')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('r')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('s')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('t')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('u')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('v')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('w')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('x')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('y')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('z')) is not None):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _Int__GEN_1(self):
        pos = self._mark()
        if ((_1 := self._expectc('0')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('1')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('2')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('3')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('4')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('5')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('6')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('7')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('8')) is not None):
            return _1
        self._reset(pos)
        if ((_1 := self._expectc('9')) is not None):
            return _1
        self._reset(pos)
        return None

    @memoize
    def _Spacing__GEN_1(self):
        pos = self._mark()
        if ((space := self._Space()) is not None):
            return space
        self._reset(pos)
        if ((endofline := self._EndOfLine()) is not None):
            return endofline
        self._reset(pos)
        return None

